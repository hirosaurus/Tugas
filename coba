import re

regex = re.compile(r'([A-Za-z0-9]+[.-_])*[A-Za-z0-9]+@[A-Za-z0-9-]+(\.[A-Z|a-z]{2,})+')

def isValid(email):
    if re.fullmatch(regex, email):
      print(True)
    else:
      print(False)

inputEmail = input("Input email : ")
isValid(inputEmail)


class SimpulPohonBiner(object):
    def __init__(self, data):
        self.data = data
        self.kiri = None
        self.kanan = None

def cetakDataDanLevel(akar, count = 0):
    if akar is not None:
        print (akar.data + " level" + str(count))
        (cetakDataDanLevel(akar.kiri, count+1),
        cetakDataDanLevel(akar.kanan, count+1))

a = SimpulPohonBiner("Sukoharjo")
b = SimpulPohonBiner("Karanganyar")
c = SimpulPohonBiner("Surakarta")
d = SimpulPohonBiner("Klaten")
e = SimpulPohonBiner("Yogyakarta")
f = SimpulPohonBiner("Semarang")
g = SimpulPohonBiner("Cilacap")
h = SimpulPohonBiner("Pacitan")

a.kiri = b; a.kanan = c
b.kiri = d; b.kanan = e
c.kiri = f; c.kanan = g
e.kiri = h;

datalist=[a.data, b.data, c.data, f.data, e.data, f.data, g.data, h.data]
level=[]

def preorder(sub):
    if sub is None:
        print(sub.data)
        preorder(sub.kiri)
        preorder(sub.kanan)

def inorder(sub):
    if sub is not None:
        inorder(sub.kiri)
        print(sub.data)
        inorder(sub.kanan)

def postorder(sub):
    if sub is not None:
        postorder(sub.kiri)
        postorder(sub.kanan)
        print(sub.data)

def traverse(root):
    lvlist=[]
    current_level = [root]
    lv = 0
    while current_level:
        next_level = list()
        for n in current_level:
            if n.kiri:
                next_level.append(n.kiri)
                level.append(lv+1)
            if n.kanan:
                next_level.append(n.kanan)
                level.append(lv+1)
            current_level = next_level

        lv+=1
        lvlist.append(lv)
    return lvlist

def cetak(root):
    traverse(a)
    print(root.data, ", Level 0")
    for i in range(len(level)):
        print(datalist[i+1], ', Level', level[i])
cetak(a)

print("Preorder")
preorder(a)
print("Inorder")
inorder(a)
